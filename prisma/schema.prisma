// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  verifyCode    String? // 验证码
  phone         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  File          File[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model File {
  id         Int    @id @default(autoincrement())
  name       String // hash 文件名，通过这个字段和七牛云sdk返回可访问的url
  originName String @default("") // 原文件名
  hash       String // osshash
  url        String // 访问url
  type       String @default("") // mimeType
  saveType   Int @default(1)// 保存类型，1文件页面，2衣柜上传图片

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String
}

// 用于各种配置
model Config {
  key       String   @id
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 实现电子衣柜
// model ClothesCategory {
//   id        Int      @id @default(autoincrement())
//   pid       Int      @default(0) // 父类id
//   name      String // 分类名
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    String // 用户id
// }

// model Clothes {
//   id         String    @id @default(cuid())
//   name       String // 衣服的名称
//   images     String? // 衣服的图片，File的name，通过英文逗号分隔多张图片
//   buyAt      DateTime? // 什么时候买的
//   cost       Int? // 花费，单位分，Int 2147483647
//   location   String? // 现在放哪了
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
//   userId     String
//   categoryId Int
// }

// 实现周期消费记录
model CycleCost {
  id        Int       @id @default(autoincrement())
  userId    String
  name      String
  cycleType CycleType
  cost      Int // 单位 分
  startAt   DateTime  @default(now()) // 从什么时候开始消费
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  remark    String? // 备注
}

enum CycleType {
  DAY
  WEEK
  MONTH
  YEAR
}
